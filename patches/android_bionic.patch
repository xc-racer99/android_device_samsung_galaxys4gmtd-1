From 2b23cfd057aca2a8df544c69c53ec3a1c0c607f1 Mon Sep 17 00:00:00 2001
From: xc-racer99 <xc-racer2@live.ca>
Date: Tue, 15 Dec 2015 18:55:58 -0800
Subject: [PATCH 1/3] bionic: Fix non-PIE support

Many ways to do this, but I know this works :)

Change-Id: I51612a74431d61e6045ec5c9d55e5cbd4eaba130
---
 linker/linker.cpp | 45 ---------------------------------------------
 1 file changed, 45 deletions(-)

diff --git a/linker/linker.cpp b/linker/linker.cpp
index 7909241..70fe1e2 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -2170,7 +2170,6 @@ bool soinfo::relocate(const VersionTracker& version_tracker, ElfRelIteratorT&& r
         *reinterpret_cast<ElfW(Addr)*>(reloc) += sym_addr - rel->r_offset;
         break;
       case R_ARM_COPY:
-#ifndef ENABLE_NON_PIE_SUPPORT
             /*
              * ET_EXEC is not supported so this should not happen.
              *
@@ -2182,50 +2181,6 @@ bool soinfo::relocate(const VersionTracker& version_tracker, ElfRelIteratorT&& r
              */
             DL_ERR("%s R_ARM_COPY relocations are not supported", get_realpath());
             return -1;
-#else
-            if ((flags & FLAG_EXE) == 0) {
-                /*
-                * http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044d/IHI0044D_aaelf.pdf
-                *
-                * Section 4.7.1.10 "Dynamic relocations"
-                * R_ARM_COPY may only appear in executable objects where e_type is
-                * set to ET_EXEC.
-                *
-                * TODO: FLAG_EXE is set for both ET_DYN and ET_EXEC executables.
-                * We should explicitly disallow ET_DYN executables from having
-                * R_ARM_COPY relocations.
-                */
-                DL_ERR("%s R_ARM_COPY relocations only supported for ET_EXEC", name);
-                return -1;
-            }
-            count_relocation(kRelocCopy);
-            MARK(rel->r_offset);
-            TRACE_TYPE(RELO, "RELO %08x <- %d @ %08x %s", reloc, s->st_size, sym_addr, sym_name);
-            if (reloc == sym_addr) {
-                ElfW(Sym)* src = soinfo_do_lookup(NULL, sym_name, &lsi);
-
-                if (src == NULL) {
-                    DL_ERR("%s R_ARM_COPY relocation source cannot be resolved", name);
-                    return -1;
-                }
-                if (lsi->has_DT_SYMBOLIC) {
-                    DL_ERR("%s invalid R_ARM_COPY relocation against DT_SYMBOLIC shared "
-                           "library %s (built with -Bsymbolic?)", name, lsi->name);
-                    return -1;
-                }
-                if (s->st_size < src->st_size) {
-                    DL_ERR("%s R_ARM_COPY relocation size mismatch (%d < %d)",
-                           name, s->st_size, src->st_size);
-                    return -1;
-                }
-                memcpy(reinterpret_cast<void*>(reloc),
-                       reinterpret_cast<void*>(src->st_value + lsi->load_bias), src->st_size);
-            } else {
-                DL_ERR("%s R_ARM_COPY relocation target cannot be resolved", name);
-                return -1;
-            }
-            break;
-#endif
 #elif defined(__i386__)
       case R_386_32:
         count_relocation(kRelocRelative);
-- 
2.1.4


From 178d4ada2bfa1ad9c8c8891ef1776e4881a004e2 Mon Sep 17 00:00:00 2001
From: xc-racer99 <xc-racer2@live.ca>
Date: Wed, 16 Dec 2015 12:38:40 -0800
Subject: [PATCH 2/3] Revert "bionic: Remove prelink support"

Needed to load older RIL blobs.
This reverts commit 792df63bae3a71c529a977bab0189473aa837480.
---
 linker/Android.mk      |  4 ++++
 linker/linker_phdr.cpp | 45 ++++++++++++++++++++++++++++++++++++++++++++-
 linker/linker_phdr.h   |  9 ++++++++-
 3 files changed, 56 insertions(+), 2 deletions(-)

diff --git a/linker/Android.mk b/linker/Android.mk
index 9f578c9..95eb305 100644
--- a/linker/Android.mk
+++ b/linker/Android.mk
@@ -49,6 +49,10 @@ ifeq ($(TARGET_IS_64_BIT),true)
 LOCAL_CPPFLAGS += -DTARGET_IS_64_BIT
 endif
 
+ifeq ($(TARGET_NEEDS_BIONIC_PRELINK_SUPPORT),true)
+    LOCAL_CFLAGS += -DENABLE_PRELINK_SUPPORT
+endif
+
 ifeq ($(TARGET_ENABLE_NON_PIE_SUPPORT),true)
     LOCAL_CFLAGS += -DENABLE_NON_PIE_SUPPORT
 endif
diff --git a/linker/linker_phdr.cpp b/linker/linker_phdr.cpp
index 30118e3..8df6198 100644
--- a/linker/linker_phdr.cpp
+++ b/linker/linker_phdr.cpp
@@ -137,6 +137,9 @@ ElfReader::ElfReader(const char* name, int fd, off64_t file_offset, off64_t file
     : name_(name), fd_(fd), file_offset_(file_offset), file_size_(file_size),
       phdr_num_(0), phdr_mmap_(nullptr), phdr_table_(nullptr), phdr_size_(0),
       load_start_(nullptr), load_size_(0), load_bias_(0),
+#ifdef ENABLE_PRELINK_SUPPORT
+      required_base_(0),
+#endif
       loaded_phdr_(nullptr) {
 }
 
@@ -301,6 +304,38 @@ size_t phdr_table_get_load_size(const ElfW(Phdr)* phdr_table, size_t phdr_count,
   return max_vaddr - min_vaddr;
 }
 
+#ifdef ENABLE_PRELINK_SUPPORT
+typedef struct {
+    long mmap_addr;
+    char tag[4]; /* 'P', 'R', 'E', ' ' */
+} prelink_info_t;
+
+/* Returns the requested base address if the library is prelinked,
+ * and 0 otherwise.  */
+static ElfW(Addr) is_prelinked(int fd, const char *name)
+{
+    off_t sz = lseek(fd, -sizeof(prelink_info_t), SEEK_END);
+    if (sz < 0) {
+        DL_ERR("lseek() failed!");
+        return 0;
+    }
+
+    prelink_info_t info;
+    int rc = TEMP_FAILURE_RETRY(read(fd, &info, sizeof(info)));
+    if (rc != sizeof(info)) {
+        DL_ERR("Could not read prelink_info_t structure for `%s`\n", name);
+        return 0;
+    }
+
+    if (memcmp(info.tag, "PRE ", 4)) {
+        DL_ERR("`%s` is not a prelinked library\n", name);
+        return 0;
+    }
+
+    return (unsigned long)info.mmap_addr;
+}
+#endif
+
 // Reserve a virtual address range big enough to hold all loadable
 // segments of a program header table. This is done by creating a
 // private anonymous mmap() with PROT_NONE.
@@ -311,7 +346,9 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
     DL_ERR("\"%s\" has no loadable segments", name_);
     return false;
   }
-
+#ifdef ENABLE_PRELINK_SUPPORT
+  required_base_ = is_prelinked(fd_, name_);
+#endif
   uint8_t* addr = reinterpret_cast<uint8_t*>(min_vaddr);
   void* start;
   size_t reserved_size = 0;
@@ -339,7 +376,13 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
       return false;
     }
     int mmap_flags = MAP_PRIVATE | MAP_ANONYMOUS;
+#ifndef ENABLE_PRELINK_SUPPORT
     start = mmap(mmap_hint, load_size_, PROT_NONE, mmap_flags, -1, 0);
+#else
+    if (required_base_ != 0)
+      mmap_flags |= MAP_FIXED;
+    start = mmap((void*)required_base_, load_size_, PROT_NONE, mmap_flags, -1, 0);
+#endif
     if (start == MAP_FAILED) {
       DL_ERR("couldn't reserve %zd bytes of address space for \"%s\"", load_size_, name_);
       return false;
diff --git a/linker/linker_phdr.h b/linker/linker_phdr.h
index 3affa66..db09d80 100644
--- a/linker/linker_phdr.h
+++ b/linker/linker_phdr.h
@@ -49,6 +49,9 @@ class ElfReader {
   size_t load_size() { return load_size_; }
   ElfW(Addr) load_bias() { return load_bias_; }
   const ElfW(Phdr)* loaded_phdr() { return loaded_phdr_; }
+#ifdef ENABLE_PRELINK_SUPPORT
+  ElfW(Addr) required_base() { return required_base_; }
+#endif
 
  private:
   bool ReadElfHeader();
@@ -77,7 +80,11 @@ class ElfReader {
   size_t load_size_;
   // Load bias.
   ElfW(Addr) load_bias_;
-
+#ifdef ENABLE_PRELINK_SUPPORT
+  // For prelinked libraries, mandatory load address of the first
+  // loadable segment. 0 otherwise.
+  ElfW(Addr) required_base_;
+#endif
   // Loaded phdr.
   const ElfW(Phdr)* loaded_phdr_;
 };
-- 
2.1.4


From e5862cc86d55f7b05152da35c880f996a2ccf461 Mon Sep 17 00:00:00 2001
From: xc-racer99 <xc-racer2@live.ca>
Date: Wed, 16 Dec 2015 16:59:32 -0800
Subject: [PATCH 3/3] linker: Fix prelink support

Use c++ casts, ignore set but unused variable

Change-Id: I041a61ffa904f2981fe2e9bdd194bb9b9d9286b4
---
 linker/Android.mk      | 1 +
 linker/linker_phdr.cpp | 4 ++--
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/linker/Android.mk b/linker/Android.mk
index 95eb305..b3bb80a 100644
--- a/linker/Android.mk
+++ b/linker/Android.mk
@@ -51,6 +51,7 @@ endif
 
 ifeq ($(TARGET_NEEDS_BIONIC_PRELINK_SUPPORT),true)
     LOCAL_CFLAGS += -DENABLE_PRELINK_SUPPORT
+    LOCAL_CPPFLAGS += -Wno-unused-but-set-variable
 endif
 
 ifeq ($(TARGET_ENABLE_NON_PIE_SUPPORT),true)
diff --git a/linker/linker_phdr.cpp b/linker/linker_phdr.cpp
index 8df6198..ddbf3cb 100644
--- a/linker/linker_phdr.cpp
+++ b/linker/linker_phdr.cpp
@@ -332,7 +332,7 @@ static ElfW(Addr) is_prelinked(int fd, const char *name)
         return 0;
     }
 
-    return (unsigned long)info.mmap_addr;
+    return static_cast<unsigned long>(info.mmap_addr);
 }
 #endif
 
@@ -381,7 +381,7 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
 #else
     if (required_base_ != 0)
       mmap_flags |= MAP_FIXED;
-    start = mmap((void*)required_base_, load_size_, PROT_NONE, mmap_flags, -1, 0);
+    start = mmap(reinterpret_cast<void*>(required_base_), load_size_, PROT_NONE, mmap_flags, -1, 0);
 #endif
     if (start == MAP_FAILED) {
       DL_ERR("couldn't reserve %zd bytes of address space for \"%s\"", load_size_, name_);
-- 
2.1.4

