From 85a4ef5e3606ddd9487412b405105e124ac44e98 Mon Sep 17 00:00:00 2001
From: Dmitry Grinberg <dmitrygr@gmail.com>
Date: Fri, 30 Oct 2015 05:00:21 +0000
Subject: [PATCH 1/3] M: Allow Bluedroid to build on systems with no LE support

Change-Id: I289eaf751864b6f19e09a5aa3b468ff7b541e553
---
 bta/dm/bta_dm_act.c  | 34 +++++++++++++++++++++++-----------
 bta/dm/bta_dm_api.c  |  5 +++++
 bta/dm/bta_dm_main.c |  0
 3 files changed, 28 insertions(+), 11 deletions(-)
 mode change 100644 => 100755 bta/dm/bta_dm_act.c
 mode change 100644 => 100755 bta/dm/bta_dm_api.c
 mode change 100644 => 100755 bta/dm/bta_dm_main.c

diff --git a/bta/dm/bta_dm_act.c b/bta/dm/bta_dm_act.c
old mode 100644
new mode 100755
index 91d2a9f..aa566f0
--- a/bta/dm/bta_dm_act.c
+++ b/bta/dm/bta_dm_act.c
@@ -346,7 +346,7 @@ static void bta_dm_sys_hw_cback( tBTA_SYS_HW_EVT status )
         memcpy(dev_class, p_bta_dm_cfg->dev_class, sizeof(dev_class));
         BTM_SetDeviceClass (dev_class);
 
-#if (defined BLE_INCLUDED && BLE_INCLUDED == TRUE)
+#if (defined(BLE_INCLUDED) && BLE_INCLUDED == TRUE)
         /* load BLE local information: ID keys, ER if available */
         bta_dm_co_ble_load_local_keys(&key_mask, er, &id_key);
 
@@ -358,7 +358,7 @@ static void bta_dm_sys_hw_cback( tBTA_SYS_HW_EVT status )
         {
             BTM_BleLoadLocalKeys(BTA_BLE_LOCAL_KEY_TYPE_ID, (tBTM_BLE_LOCAL_KEYS *)&id_key);
         }
-#if ((defined BTA_GATT_INCLUDED) && (BTA_GATT_INCLUDED == TRUE))
+#if ((defined (BTA_GATT_INCLUDED) && (BTA_GATT_INCLUDED == TRUE))
         bta_dm_search_cb.conn_id = BTA_GATT_INVALID_CONN_ID;
 #endif
 #endif
@@ -539,18 +539,21 @@ void bta_dm_set_dev_name (tBTA_DM_MSG *p_data)
 void bta_dm_set_visibility(tBTA_DM_MSG *p_data)
 {
     UINT16 window, interval;
+#if defined (BTA_GATT_INCLUDED) && BTA_GATT_INCLUDED
     UINT16 le_disc_mode = BTM_BleReadDiscoverability();
-    UINT16 disc_mode = BTM_ReadDiscoverability(&window, &interval);
     UINT16 le_conn_mode = BTM_BleReadConnectability();
+#endif
+    UINT16 disc_mode = BTM_ReadDiscoverability(&window, &interval);
     UINT16 conn_mode = BTM_ReadConnectability(&window, &interval);
 
     /* set modes for Discoverability and connectability if not ignore */
     if (p_data->set_visibility.disc_mode != (BTA_DM_IGNORE | BTA_DM_LE_IGNORE))
     {
+#if defined (BTA_GATT_INCLUDED) && BTA_GATT_INCLUDED
         if ((p_data->set_visibility.disc_mode & BTA_DM_LE_IGNORE) == BTA_DM_LE_IGNORE)
             p_data->set_visibility.disc_mode =
                 ((p_data->set_visibility.disc_mode & ~BTA_DM_LE_IGNORE) | le_disc_mode);
-
+#endif
         if ((p_data->set_visibility.disc_mode & BTA_DM_IGNORE) == BTA_DM_IGNORE)
             p_data->set_visibility.disc_mode =
                 ((p_data->set_visibility.disc_mode & ~BTA_DM_IGNORE) | disc_mode);
@@ -562,10 +565,11 @@ void bta_dm_set_visibility(tBTA_DM_MSG *p_data)
 
     if (p_data->set_visibility.conn_mode != (BTA_DM_IGNORE | BTA_DM_LE_IGNORE))
     {
+#if defined (BTA_GATT_INCLUDED) && BTA_GATT_INCLUDED
         if ((p_data->set_visibility.conn_mode & BTA_DM_LE_IGNORE) == BTA_DM_LE_IGNORE)
             p_data->set_visibility.conn_mode =
                 ((p_data->set_visibility.conn_mode & ~BTA_DM_LE_IGNORE) | le_conn_mode);
-
+#endif
         if ((p_data->set_visibility.conn_mode & BTA_DM_IGNORE) == BTA_DM_IGNORE)
             p_data->set_visibility.conn_mode =
                 ((p_data->set_visibility.conn_mode & ~BTA_DM_IGNORE) | conn_mode);
@@ -644,6 +648,7 @@ void bta_dm_process_remove_device(BD_ADDR bd_addr)
 void bta_dm_remove_device(tBTA_DM_MSG *p_data)
 {
     tBTA_DM_API_REMOVE_DEVICE *p_dev = &p_data->remove_dev;
+    BOOLEAN continue_delete_other_dev = FALSE;
     if (p_dev == NULL)
         return;
 
@@ -665,8 +670,14 @@ void bta_dm_remove_device(tBTA_DM_MSG *p_data)
         {
             if (!bdcmp(bta_dm_cb.device_list.peer_device[i].peer_bdaddr, p_dev->bd_addr))
             {
+                UINT8 xport = BT_TRANSPORT_BR_EDR;
+
+#if defined (BTA_GATT_INCLUDED) && BTA_GATT_INCLUDED
+                xport = bta_dm_cb.device_list.peer_device[i].transport
+#endif
                 bta_dm_cb.device_list.peer_device[i].conn_state = BTA_DM_UNPAIRING;
-                btm_remove_acl( p_dev->bd_addr, bta_dm_cb.device_list.peer_device[i].transport);
+                btm_remove_acl( p_dev->bd_addr, xport);
+#if defined (BTA_GATT_INCLUDED) && BTA_GATT_INCLUDED
                 APPL_TRACE_DEBUG("%s:transport = %d", __func__,
                                   bta_dm_cb.device_list.peer_device[i].transport);
 
@@ -675,6 +686,8 @@ void bta_dm_remove_device(tBTA_DM_MSG *p_data)
                    other_transport = BT_TRANSPORT_BR_EDR;
                 else
                    other_transport = BT_TRANSPORT_LE;
+#endif
+
                 break;
             }
         }
@@ -683,10 +696,9 @@ void bta_dm_remove_device(tBTA_DM_MSG *p_data)
     {
         continue_delete_dev = TRUE;
     }
-
+#if defined (BTA_GATT_INCLUDED) && BTA_GATT_INCLUDED
     // If it is DUMO device and device is paired as different address, unpair that device
     // if different address
-    BOOLEAN continue_delete_other_dev = FALSE;
     if ((other_transport && (BTM_ReadConnectedTransportAddress(other_address, other_transport))) ||
       (!other_transport && (BTM_ReadConnectedTransportAddress(other_address, BT_TRANSPORT_BR_EDR) ||
        BTM_ReadConnectedTransportAddress(other_address, BT_TRANSPORT_LE))))
@@ -708,7 +720,7 @@ void bta_dm_remove_device(tBTA_DM_MSG *p_data)
         APPL_TRACE_DEBUG("%s: continue to delete the other dev ", __func__);
         continue_delete_other_dev = TRUE;
     }
-
+#endif
     /* Delete the device mentioned in the msg */
     if (continue_delete_dev)
         bta_dm_process_remove_device(p_dev->bd_addr);
@@ -2313,7 +2325,7 @@ static void bta_dm_discover_device(BD_ADDR remote_bd_addr)
         APPL_TRACE_DEBUG("%s appl_knows_rem_name %d", __func__,
                             bta_dm_search_cb.p_btm_inq_info->appl_knows_rem_name);
     }
-
+#if (defined(BLE_INCLUDED) && BLE_INCLUDED == TRUE)
     if((bta_dm_search_cb.p_btm_inq_info)
        && (bta_dm_search_cb.p_btm_inq_info->results.device_type == BT_DEVICE_TYPE_BLE)
        && (bta_dm_search_cb.state == BTA_DM_SEARCH_ACTIVE))
@@ -2321,7 +2333,7 @@ static void bta_dm_discover_device(BD_ADDR remote_bd_addr)
         /* Do not perform RNR for LE devices at inquiry complete*/
         bta_dm_search_cb.name_discover_done = TRUE;
     }
-
+#endif
     /* if name discovery is not done and application needs remote name */
     if ((!bta_dm_search_cb.name_discover_done)
        && (( bta_dm_search_cb.p_btm_inq_info == NULL )
diff --git a/bta/dm/bta_dm_api.c b/bta/dm/bta_dm_api.c
old mode 100644
new mode 100755
index 061e7ff..09761b5
--- a/bta/dm/bta_dm_api.c
+++ b/bta/dm/bta_dm_api.c
@@ -919,6 +919,7 @@ void BTA_DmSetBlePrefConnParams(BD_ADDR bd_addr,
 *******************************************************************************/
 void BTA_DmSetBleConnScanParams(UINT32 scan_interval, UINT32 scan_window)
 {
+#if BLE_INCLUDED == TRUE
     tBTA_DM_API_BLE_SCAN_PARAMS  *p_msg;
     if ((p_msg = (tBTA_DM_API_BLE_SCAN_PARAMS *)GKI_getbuf(sizeof(tBTA_DM_API_BLE_SCAN_PARAMS))) != NULL)
     {
@@ -928,6 +929,7 @@ void BTA_DmSetBleConnScanParams(UINT32 scan_interval, UINT32 scan_window)
         p_msg->scan_window      = scan_window;
         bta_sys_sendmsg(p_msg);
     }
+#endif
 }
 
 /*******************************************************************************
@@ -945,6 +947,8 @@ void BTA_DmSetBleConnScanParams(UINT32 scan_interval, UINT32 scan_window)
 ** Returns          void
 **
 *******************************************************************************/
+
+#if BLE_INCLUDED == TRUE
 void BTA_DmSetBleScanParams(tGATT_IF client_if, UINT32 scan_interval,
                             UINT32 scan_window, tBLE_SCAN_MODE scan_mode,
                             tBLE_SCAN_PARAM_SETUP_CBACK scan_param_setup_cback)
@@ -964,6 +968,7 @@ void BTA_DmSetBleScanParams(tGATT_IF client_if, UINT32 scan_interval,
         bta_sys_sendmsg(p_msg);
     }
 }
+#endif
 
 /*******************************************************************************
 **
diff --git a/bta/dm/bta_dm_main.c b/bta/dm/bta_dm_main.c
old mode 100644
new mode 100755
-- 
2.1.4


From 0ae781919ed6cfd8f61fb816e7a5e155972803c2 Mon Sep 17 00:00:00 2001
From: sooti <sooti85@gmail.com>
Date: Thu, 10 Dec 2015 04:33:40 -0800
Subject: [PATCH 2/3] fix another bt compilation problem

Change-Id: I6084fa03441974796c2df7f3a6845562c7e371d8
---
 stack/btm/btm_acl.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/stack/btm/btm_acl.c b/stack/btm/btm_acl.c
index b09f91b..51431ce 100644
--- a/stack/btm/btm_acl.c
+++ b/stack/btm/btm_acl.c
@@ -927,9 +927,11 @@ void btm_read_remote_version_complete (UINT8 *p)
                 STREAM_TO_UINT16 (p_acl_cb->lmp_subversion, p);
             }
 
+#if BTA_GATT_INCLUDED == TRUE
             if (p_acl_cb->transport == BT_TRANSPORT_LE)
                 l2cble_notify_le_connection (p_acl_cb->remote_addr);
             break;
+#endif
         }
     }
 }
-- 
2.1.4


From cb43536f9cb01701d4aea4f24f952e6f2314b4c8 Mon Sep 17 00:00:00 2001
From: xc-racer99 <xc-racer2@live.ca>
Date: Sat, 16 Jan 2016 17:23:57 -0800
Subject: [PATCH 3/3] system: bt: Don't break compilation for GATT or LE

Change-Id: I059a9d76714c548d7d216c60b95cff34a592d55f
---
 bta/dm/bta_dm_act.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/bta/dm/bta_dm_act.c b/bta/dm/bta_dm_act.c
index aa566f0..66cc964 100755
--- a/bta/dm/bta_dm_act.c
+++ b/bta/dm/bta_dm_act.c
@@ -358,7 +358,7 @@ static void bta_dm_sys_hw_cback( tBTA_SYS_HW_EVT status )
         {
             BTM_BleLoadLocalKeys(BTA_BLE_LOCAL_KEY_TYPE_ID, (tBTM_BLE_LOCAL_KEYS *)&id_key);
         }
-#if ((defined (BTA_GATT_INCLUDED) && (BTA_GATT_INCLUDED == TRUE))
+#if (defined(BTA_GATT_INCLUDED) && BTA_GATT_INCLUDED == TRUE)
         bta_dm_search_cb.conn_id = BTA_GATT_INVALID_CONN_ID;
 #endif
 #endif
@@ -673,7 +673,7 @@ void bta_dm_remove_device(tBTA_DM_MSG *p_data)
                 UINT8 xport = BT_TRANSPORT_BR_EDR;
 
 #if defined (BTA_GATT_INCLUDED) && BTA_GATT_INCLUDED
-                xport = bta_dm_cb.device_list.peer_device[i].transport
+                xport = bta_dm_cb.device_list.peer_device[i].transport;
 #endif
                 bta_dm_cb.device_list.peer_device[i].conn_state = BTA_DM_UNPAIRING;
                 btm_remove_acl( p_dev->bd_addr, xport);
-- 
2.1.4

